View(traplocs)
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
newhalfnormt1<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
debug(sim.bear)
newhalfnormt1<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
View(ACs)
plot(ACs$y~ACs~x)
plot(ACs$y~ACs$x)
View(dists)
plot(dists$g)
newhalfnormt1<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
undebug(sim.bear)
newhalfnormt1<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
samps<-newhalfnormt1
write.table(samps, file=patht0, sep = ",")
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapcsv, detector = 'proximity')
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~b), buffer = 10000, trace = FALSE, CL=TRUE, detectfn = 0)
fitted
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 10000, trace = FALSE, CL=TRUE, detectfn = 0)
fitted
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 10000, trace = FALSE, CL=TRUE, detectfn = 0)
g0<-newSECR$fit$par[1]
g0.bTRUE<-newSECR$fit$par[2]
sigma<-newSECR$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma)
g0check<-rbind(g0check, newLine)
}
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 10000, trace = FALSE, CL=TRUE, detectfn = 0)
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma)
g0check<-rbind(g0check, newLine)
}
View(g0check)
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check<-rbind(g0check, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check<-rbind(g0check, newLine)
}
View(g0check)
fitted$fit
fitted$fit$par
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-NA
sigma<-fitted$fit$par[2]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check<-rbind(g0check, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check<-rbind(g0check, newLine)
}
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-NA
sigma<-fitted$fit$par[2]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check<-rbind(g0check, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check<-rbind(g0check, newLine)
}
View(g0check)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
fitted
g0check<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
sigma<-fitted$fit$par[2]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check<-rbind(g0check, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
sigma<-fitted$fit$par[2]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check<-rbind(g0check, newLine)
}
View(g0check)
bwplot
bwplot(g0~trial, data=g0check)
bwplot(g0~trial, data=filter(g0check, g0 < 1))
plogis(.5)
plogis(-.5)
#' This document will explore possible capture probabilities using different behavioral and IH parameters.
#' Sourcing logit stuff from Spatial.R with some modification for simplicity
behav <- -1
int.g0<- .5
IH <- 0
sig <- sqrt((1500*1500)/pi)
captured<-FALSE
g0frame<-data.frame()
xdists<-seq(0,3000, 2)
#'control
logit.g0<- int.g0 + behav*captured + IH
g0<-plogis(logit.g0)
g0dists <- g0 * exp((-xdists^2)/(2*sig^2))
new<-data.frame(xdists, g0dists, type="control")
g0frame<-rbind(g0frame, new)
#'captured
captured<-TRUE
logit.g0<- int.g0 + behav*captured + IH
g0<-plogis(logit.g0)
g0dists <- g0 * exp((-xdists^2)/(2*sig^2))
new<-data.frame(xdists, g0dists, type="captured")
g0frame<-rbind(g0frame, new)
#'Extreme IH values
captured<-FALSE
IH<-2.25
logit.g0<- int.g0 + behav*captured + IH
g0<-plogis(logit.g0)
g0dists <- g0 * exp((-xdists^2)/(2*sig^2))
new<-data.frame(xdists, g0dists, type="IH.hi")
g0frame<-rbind(g0frame, new)
captured<-FALSE
IH<- -2.25
logit.g0 <- int.g0 + behav*captured + IH
g0<-plogis(logit.g0)
g0dists <- g0 * exp((-xdists^2)/(2*sig^2))
new<-data.frame(xdists, g0dists, type="IH.lo")
g0frame<-rbind(g0frame, new)
#'Extreme low IH plus behav effect
captured<-TRUE
IH<- -2.25
logit.g0 <- int.g0 + behav*captured + IH
g0<-plogis(logit.g0)
g0dists <- g0 * exp((-xdists^2)/(2*sig^2))
new<-data.frame(xdists, g0dists, type="IH.lo and captured")
g0frame<-rbind(g0frame, new)
ggplot(data=g0frame,
aes(x=xdists, y=g0dists, colour=type)) +
geom_line()
bwplot(plogis(g0)~trial, data=filter(g0check, g0 < 1))
g0check2<-NULL
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~b), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check2<-rbind(g0check2, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~b), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check2<-rbind(g0check2, newLine)
}
bwplot(g0.bTRUE~trial, data=g0check2)
bwplot(g0~trial, data=g0check2)
for (j in 1:1000){
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~b), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t1")
g0check2<-rbind(g0check2, newLine)
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=-1, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~b), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
g0.bTRUE<-fitted$fit$par[2]
sigma<-fitted$fit$par[3]
newLine<-data.frame(g0, g0.bTRUE, sigma, trial="t2")
g0check2<-rbind(g0check2, newLine)
}
bwplot(g0.bTRUE~trial, data=g0check2)
bwplot(g0~trial, data=g0check2)
bwplot(g0.bTRUE~trial, data=g0check2)
bwplot(g0~trial, data=g0check2)
mean(g0~trial, data=g0check2)
mean(g0.bTRUE~trial, data=g0check2)
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
debug(what)
what()
what()
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
what()
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
?browser
samps<-sim.bear(known = known, sig = sig, int.g0 =.5 , traplocs=traplocs, behav=0, IH=0, sessions=10, redun=0, stratDensity=0)
patht0<-tempfile(fileext = ".csv")
write.table(samps, file=patht0, sep = ",")
t0caphist<-read.capthist(captfile = patht0, trapfile = trapPath, detector = 'proximity')
fitted<-secr.fit(t0caphist, model = list(g0~1), buffer = 1000, trace = FALSE, CL=TRUE, detectfn = 0, start = list(.4, 0, 650))
g0<-fitted$fit$par[1]
sigma<-fitted$fit$par[2]
newLine<-data.frame(g0, sigma, trial="t1")
g0check<-rbind(g0check, newLine)
View(g0check2)
g0check<-g0check[,-"g0.bTRUE"]
g0check<-g0check[,-2]
View(g0check)
source('~/Google Drive/spatialMR/Rscripts/Simulation/g0check.R')
bwplot(g0.bTRUE~trial, data=g0check2)
bwplot(g0~trial, data=g0check2)
mean(g0.bTRUE~trial, data=g0check2)
mean(g0~trial, data=g0check2)
plogis(.5)
mean(plogis(g0)~trial, data=g0check2)
mean(plogis(g0.bTRUE)~trial, data=g0check2)
mean(plogis(g0+g0.bTRUE)~trial, data=g0check2)
log(6.77)
exp(6.77)
Reduce(paste, deparse(modEval))
modEval<-list(g0~b)
Reduce(paste, deparse(modEval))
modEval<-g0~b
Reduce(paste, deparse(modEval))
modEval<-Reduce(paste, deparse(modEval))
modelPathName<-gsub(pattern = " ~ ", replacement = "tilde" , x = modEval)
modelPathName
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
bear.setup()
setwd("/Users/nick/Google Drive/spatialMR/Rscripts/Simulation")
compile.secr.results <- function (){
library(secr)
compiled<-data.frame()
for(j in c("t1","t2","t3","t4","t5","t6", "t7", "t8")){
for (k in c("g0 tilde b")){
path<-paste("~/Google Drive/spatialMR/data/SimulationData/", j, "/", k, sep="", collapse="")
files<-list.files(path)
whichDesktop<-which(files=="desktop.ini")
whichIcon<-which(files=="Icon\r")
if (length(whichDesktop)>0){files<-files[-whichDesktop]}
if (length(whichIcon)>0){files<-files[-whichIcon]}
files<-paste(path, files, sep="/")
for (m in 1:length(files)){
newSECR<-readRDS(files[m])
for (i in 1:nrow(newSECR$fullsamps)){
newSECR$fullsamps$uniqueID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], sep="", collapse="")
newSECR$fullsamps$INDuniqID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], newSECR$fullsamps$ID[i],sep="", collapse="")
}
#Redundancy info
FullN.notRedun=length(!duplicated(newSECR$fullsamps$INDuniqID))
SubN.notRedun=length(!duplicated(newSECR$subsamps$INDuniqID))
SubProp.notRedun=SubN.notRedun/200
#Nhat info
nhatBoth<-region.N(newSECR)
nhat = nhatBoth[1,1]
nhat.SE = nhatBoth[1,2]
#Basic info on which trial and subtype that I should have passed thru the functions themselves to model
fileSplit<-strsplit(files[m], split = "/")[[1]]
sim<-fileSplit[8]
model<-fileSplit[7]
trial<-fileSplit[6]
g0<-newSECR$fit$par[1]
g0.bTRUE<-newSECR$fit$par[2]
sigma<-newSECR$fit$par[3]
fullN<-newSECR$fullN
#Compiling
newLine<-data.frame(FullN.notRedun, SubProp.notRedun, SubN.notRedun, nhat, nhat.SE, g0, g0.bTRUE, sigma, sim, model, trial, fullN)
compiled<-rbind(compiled, newLine)
print(newLine)
}
}
}
return(compiled)
}
#compiled<-compile.secr.results
#or read in old one
compiled<-compile.secr.results()
setwd("/Users/nick/Google Drive/spatialMR/Rscripts/Simulation")
compile.secr.results <- function (){
library(secr)
compiled<-data.frame()
for(j in c("t1","t2","t3","t4","t5","t6", "t7", "t8")){
for (k in c("g0tildeb", "g0tilde1")){
path<-paste("~/Google Drive/spatialMR/data/SimulationData/", j, "/", k, sep="", collapse="")
files<-list.files(path)
whichDesktop<-which(files=="desktop.ini")
whichIcon<-which(files=="Icon\r")
if (length(whichDesktop)>0){files<-files[-whichDesktop]}
if (length(whichIcon)>0){files<-files[-whichIcon]}
files<-paste(path, files, sep="/")
for (m in 1:length(files)){
newSECR<-readRDS(files[m])
for (i in 1:nrow(newSECR$fullsamps)){
newSECR$fullsamps$uniqueID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], sep="", collapse="")
newSECR$fullsamps$INDuniqID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], newSECR$fullsamps$ID[i],sep="", collapse="")
}
#Redundancy info
FullN.notRedun=length(!duplicated(newSECR$fullsamps$INDuniqID))
SubN.notRedun=length(!duplicated(newSECR$subsamps$INDuniqID))
SubProp.notRedun=SubN.notRedun/200
#Nhat info
nhatBoth<-region.N(newSECR)
nhat = nhatBoth[1,1]
nhat.SE = nhatBoth[1,2]
#Basic info on which trial and subtype that I should have passed thru the functions themselves to model
fileSplit<-strsplit(files[m], split = "/")[[1]]
sim<-fileSplit[8]
model<-fileSplit[7]
trial<-fileSplit[6]
g0<-newSECR$fit$par[1]
g0.bTRUE<-newSECR$fit$par[2]
sigma<-newSECR$fit$par[3]
fullN<-newSECR$fullN
#Compiling
newLine<-data.frame(FullN.notRedun, SubProp.notRedun, SubN.notRedun, nhat, nhat.SE, g0, g0.bTRUE, sigma, sim, model, trial, fullN)
compiled<-rbind(compiled, newLine)
print(newLine)
}
}
}
return(compiled)
}
#compiled<-compile.secr.results
#or read in old one
compiled<-compile.secr.results()
View(compiled)
setwd("/Users/nick/Google Drive/spatialMR/Rscripts/Simulation")
compile.secr.results <- function (){
library(secr)
compiled<-data.frame()
for(j in c("t1","t2","t3","t4","t5","t6", "t7", "t8")){
for (k in c("g0tildeb", "g0tilde1")){
path<-paste("~/Google Drive/spatialMR/data/SimulationData/", j, "/", k, sep="", collapse="")
files<-list.files(path)
whichDesktop<-which(files=="desktop.ini")
whichIcon<-which(files=="Icon\r")
if (length(whichDesktop)>0){files<-files[-whichDesktop]}
if (length(whichIcon)>0){files<-files[-whichIcon]}
files<-paste(path, files, sep="/")
for (m in 1:length(files)){
newSECR<-readRDS(files[m])
for (i in 1:nrow(newSECR$fullsamps)){
newSECR$fullsamps$uniqueID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], sep="", collapse="")
newSECR$fullsamps$INDuniqID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], newSECR$fullsamps$ID[i],sep="", collapse="")
}
#Redundancy info
FullN.notRedun=length(!duplicated(newSECR$fullsamps$INDuniqID))
SubN.notRedun=length(!duplicated(newSECR$subsamps$INDuniqID))
SubProp.notRedun=SubN.notRedun/200
#Nhat info
nhatBoth<-region.N(newSECR)
nhat = nhatBoth[1,1]
nhat.SE = nhatBoth[1,2]
#Basic info on which trial and subtype that I should have passed thru the functions themselves to model
fileSplit<-strsplit(files[m], split = "/")[[1]]
sim<-fileSplit[8]
model<-fileSplit[7]
trial<-fileSplit[6]
if (length(newSECR$fit$par)==2){
g0<-newSECR$fit$par[1]
g0.bTRUE<-newSECR$fit$par[2]
sigma<-newSECR$fit$par[3]
} else {
g0<-newSECR$fit$par[1]
sigma<-newSECR$fit$par[2]
}
fullN<-newSECR$fullN
#Compiling
newLine<-data.frame(FullN.notRedun, SubProp.notRedun, SubN.notRedun, nhat, nhat.SE, g0, g0.bTRUE, sigma, sim, model, trial, fullN)
compiled<-rbind(compiled, newLine)
print(newLine)
}
}
}
return(compiled)
}
#compiled<-compile.secr.results
#or read in old one
compiled<-compile.secr.results()
setwd("/Users/nick/Google Drive/spatialMR/Rscripts/Simulation")
compile.secr.results <- function (){
library(secr)
compiled<-data.frame()
for(j in c("t1","t2","t3","t4","t5","t6", "t7", "t8")){
for (k in c("g0tildeb", "g0tilde1")){
path<-paste("~/Google Drive/spatialMR/data/SimulationData/", j, "/", k, sep="", collapse="")
files<-list.files(path)
whichDesktop<-which(files=="desktop.ini")
whichIcon<-which(files=="Icon\r")
if (length(whichDesktop)>0){files<-files[-whichDesktop]}
if (length(whichIcon)>0){files<-files[-whichIcon]}
files<-paste(path, files, sep="/")
for (m in 1:length(files)){
newSECR<-readRDS(files[m])
for (i in 1:nrow(newSECR$fullsamps)){
newSECR$fullsamps$uniqueID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], sep="", collapse="")
newSECR$fullsamps$INDuniqID[i]<-paste(newSECR$fullsamps$Period[i], newSECR$fullsamps$site[i], newSECR$fullsamps$ID[i],sep="", collapse="")
}
#Redundancy info
FullN.notRedun=length(!duplicated(newSECR$fullsamps$INDuniqID))
SubN.notRedun=length(!duplicated(newSECR$subsamps$INDuniqID))
SubProp.notRedun=SubN.notRedun/200
#Nhat info
nhatBoth<-region.N(newSECR)
nhat = nhatBoth[1,1]
nhat.SE = nhatBoth[1,2]
#Basic info on which trial and subtype that I should have passed thru the functions themselves to model
fileSplit<-strsplit(files[m], split = "/")[[1]]
sim<-fileSplit[8]
model<-fileSplit[7]
trial<-fileSplit[6]
if (length(newSECR$fit$par)==2){
g0<-newSECR$fit$par[1]
g0.bTRUE<-NA
sigma<-newSECR$fit$par[2]
} else {
g0<-newSECR$fit$par[1]
g0.bTRUE<-newSECR$fit$par[2]
sigma<-newSECR$fit$par[3]
}
fullN<-newSECR$fullN
#Compiling
newLine<-data.frame(FullN.notRedun, SubProp.notRedun, SubN.notRedun, nhat, nhat.SE, g0, g0.bTRUE, sigma, sim, model, trial, fullN)
compiled<-rbind(compiled, newLine)
print(newLine)
}
}
}
return(compiled)
}
#compiled<-compile.secr.results
#or read in old one
compiled<-compile.secr.results()
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
source('~/Google Drive/spatialMR/Rscripts/Simulation/RescueSpatail.R')
