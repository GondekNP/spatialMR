rnorm(n=10,mean=1000,sd=200)
source('~/Google Drive/spatialMR/Rscripts/Simulation/SimSummary.R')
for (j in 1:1200) {#
  lens<-data.frame()#
  t1<- data.frame("t1", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t2<- data.frame("t2", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav = -0.7, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t3<- data.frame("t3", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=0, stratDensity=0)))#
  t4<- data.frame("t4", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=1, stratDensity=0)))#
  t5<- data.frame("t5", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t6<- data.frame("t6", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t7<- data.frame("t7", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=.75)))#
  lens<-rbind(lens, t1, t2, t3, t4, t5, t6, t7)#
  print(j)#
  }
sim.bear <- function (known, sig, traplocs, int.g0=1, behav= -.7, IH=0, sessions=2, redun = 0, inhib=.2, stratDensity=0){#
  library(sp)#
  library(mosaic)#
  library(LaplacesDemon)#
  #'Defining 'observation window' in spatstat for rSSI to work properly#
  library(spatstat)#
  traprange<-owin(xrange=c(min(as.numeric(traplocs$X))-1, max(as.numeric(traplocs$X))+1),#
                  yrange=c(min(as.numeric(traplocs$Y))-1, max(as.numeric(traplocs$Y))+1))#
  traprange$units$singular<-"meter"#
  traprange$units$plural<-"meters"#
  #Simulating AC's for 15 bears, with inhibition range 'r' defined by homerange radius.#
  #If strat density is nonzero, create disproportionate grid #
  if(stratDensity!=0){#
    #Get some AC's for the whole grid first#
    AC <- rSSI(r = inhib, n=round(length(known)*(1-stratDensity)), win = traprange, giveup = 10000)#
    #Half the size of the grid#
    traprange$xrange<-c(0, max(traprange$xrange)/2)#
    #Generate the rest of the points on the half grid#
    AC2 <- rSSI(r = inhib, n=round(length(known)*stratDensity), win = traprange, giveup = 10000)#
    AC <- rbind(data.frame(AC), data.frame(AC2))#
  }#
  else {AC <- rSSI(r = inhib, n=length(known), win = traprange, giveup = 10000)}#
  ACs<-data.frame(AC, ID=known, captured=rep(FALSE,length(known)), IHconstant = rnorm(n = length(known), mean=0, sd = IH))#
  BearSamps<-data.frame()#
  for (s in 1:sessions){ #Captures for each session#
    for (b in known){ #Captures for each bear in each session#
      bAC<-as.numeric(filter(ACs, ID==b)[,c("x","y")])#
      #Euclidean distance between AC for this bear and each trap location, and subsequent half-normal capture prob#
      trapMatrix<-data.matrix(traplocs[,c("X", "Y")])#
      dists<-data.frame(dist=spDistsN1(pts=trapMatrix, pt = bAC), trapID=traplocs$Detector)#
      dists$dist<-dists$dist*1000 #In km for some reason...#
      for (h in 1:nrow(dists)){ #For each individual trap#
        # intercept capture prob + behavior effect + effect from individual heterogeneity#
        logit.g0<- int.g0 + behav*filter(ACs, ID==b)[,"captured"] + filter(ACs, ID==b)[,"IHconstant"]#
        g0<-plogis(logit.g0)#
        dists<-mutate(dists, g = g0 * dhalfnorm(scale = sig, x = dist) * 1000) #TODO: Ask john why this works #
        capProb <- dists$g[h] #Default capture probability#
        IHc<-filter(ACs, ID==b)[,"IHconstant"]#
        if ( rbinom(n=1, size=1, prob=capProb) == 1 ){ ##Coin flip - if captured (evals to 1), add a row to the samps#
          newSamp<-data.frame(type="BearMR", ID = b, Period=s, site=dists$trapID[h]) #first (non-redundant) sample#
          BearSamps<-rbind(BearSamps, newSamp)#
          if (redun!=0){#
            for (v in (1:(rpois(1, (redun + exp(IHc)))))) {BearSamps<-rbind(BearSamps, newSamp)} #if redun is 0, evals to 1, only one samp#
          }#
          ACs$captured[which(known==b)] <- TRUE ##Bear is captured, next time the cap prob will change depending on 'behav'#
        }#
      }#
    }#
  }#
  BearSamps$Period<-as.numeric(BearSamps$Period)#
  return(BearSamps)#
}
for (j in 1:1200) {#
  lens<-data.frame()#
  t1<- data.frame("t1", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t2<- data.frame("t2", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav = -0.7, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t3<- data.frame("t3", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=0, stratDensity=0)))#
  t4<- data.frame("t4", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=1, stratDensity=0)))#
  t5<- data.frame("t5", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t6<- data.frame("t6", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t7<- data.frame("t7", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=.75)))#
  lens<-rbind(lens, t1, t2, t3, t4, t5, t6, t7)#
  print(j)#
  }
library(secr)#
    setwd("~/Google Drive/spatialMR/Rscripts/Simulation")#
    traplocs<-make.grid(nx=6, ny=6, spacing = 800)#
    traplocs[,3]<-rownames(traplocs)#
    colnames(traplocs)<-c("x","y","detectorID")#
    traplocs2<-cbind(traplocs$detectorID, traplocs$x, traplocs$y)#
    traplocs2<-as.data.frame(traplocs2)#
    colnames(traplocs2)<-c("Detector", "X", "Y") #Mimicing efford documentation to HOPEFULLY get it to work...#
    rownames(traplocs2)<-rownames(traplocs)#
    traplocs<-traplocs2#
    trapPath<-tempfile(fileext = ".csv")#
    write.table(x = traplocs, file = trapPath, sep=",", col.names = FALSE, row.names = FALSE) #needed to drop rownames and colnames!  #
    ##Genetically identified individuals (instead of 16-34-299 for eg, letters for simplicity)#
    known<-c(letters, LETTERS, c("Aa", "Bb", "Cc", "Dd", "Ee", "Ff", "Gg","Hh"))[1:30] ##30 known bears#
    sig<-sqrt(3/pi) / 1000
for (j in 1:1200) {#
  lens<-data.frame()#
  t1<- data.frame("t1", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t2<- data.frame("t2", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav = -0.7, IH=0, sessions=2, redun=0, stratDensity=0)))#
  t3<- data.frame("t3", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=0, stratDensity=0)))#
  t4<- data.frame("t4", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=0, sessions=2, redun=1, stratDensity=0)))#
  t5<- data.frame("t5", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=0, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t6<- data.frame("t6", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=0)))#
  t7<- data.frame("t7", nrow(sim.bear(known = known, sig = sig, int.g0=1, traplocs=traplocs, behav=-.7, IH=1.25, sessions=2, redun=1, stratDensity=.75)))#
  lens<-rbind(lens, t1, t2, t3, t4, t5, t6, t7)#
  print(j)#
  }
